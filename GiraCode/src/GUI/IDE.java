/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Code.Interprete;
import Code.SyntaxChecker;
import Code.TxtHelper;
import Code.main;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Mario A
 */
public class IDE extends javax.swing.JFrame {

    int numeroDeLineas = 1;
    //String currentWord = "";

    /**
     * Creates new form IDE
     */
    public IDE() {
        // Carga el look and feel de windows
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Throwable e) {
            e.printStackTrace();
        }
        // Carga los componentes e inicializa variables                 
        initComponents();
        this.setLocationRelativeTo(null);
        // Hace que los scrollbars se sincronizen
        Scroll_Numeros.getVerticalScrollBar().setModel(Scroll_Editor.getVerticalScrollBar().getModel());
        // Se inicializan los colores para las palabras reservadas y la salida
        crearStyles();
    }

    /**
     * Metodo utilizado para cargar los formatos del editor, los numeros del
     * linea y la salida en consola
     */
    private void crearStyles() {
        // Acomoda el texto del numero de lineas a la derecha del TextPane
        SimpleAttributeSet attribs = new SimpleAttributeSet();
        StyleConstants.setAlignment(attribs, StyleConstants.ALIGN_RIGHT);
        Txt_NumeroLineas.setParagraphAttributes(attribs, false);
        Txt_NumeroLineas.setText("1");

        // Formato para las palabras reservadas
        Style style;
        Color reservada = new Color(9, 146, 239);
        Color exito = new Color(37, 173, 40);
        Color fail = new Color(243, 5, 5);

        // Establece el formato para las palabras reservadas (color celeste y negrita)
        style = Txt_Editor.addStyle("reservada", null);
        StyleConstants.setBold(style, true);
        StyleConstants.setForeground(style, reservada);

        // Formato para la salida exitosa del programa
        style = Txt_Output.addStyle("ok", null);
        StyleConstants.setForeground(style, exito);

        // Formato para la salida fallida del programa
        style = Txt_Output.addStyle("fail", null);
        StyleConstants.setForeground(style, fail);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel_Superior = new javax.swing.JPanel();
        Lbl_Cargar = new javax.swing.JLabel();
        Lbl_Ejecutar = new javax.swing.JLabel();
        Lbl_Compilar = new javax.swing.JLabel();
        Lbl_Guardar = new javax.swing.JLabel();
        Panel_Lateral = new javax.swing.JPanel();
        Btn_if = new javax.swing.JButton();
        Btn_while = new javax.swing.JButton();
        Btn_for = new javax.swing.JButton();
        Btn_doWhile = new javax.swing.JButton();
        Btn_print = new javax.swing.JButton();
        Scroll_Editor = new javax.swing.JScrollPane();
        Txt_Editor = new javax.swing.JTextPane();
        Scroll_Salida = new javax.swing.JScrollPane();
        Txt_Output = new javax.swing.JTextPane();
        Lbl_Logo = new javax.swing.JLabel();
        Scroll_Numeros = new javax.swing.JScrollPane();
        Txt_NumeroLineas = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        Lbl_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GiraCODE");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Panel_Superior.setOpaque(false);

        Lbl_Cargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Cargar.png"))); // NOI18N
        Lbl_Cargar.setToolTipText("Cargar Código");
        Lbl_Cargar.setFocusable(false);
        Lbl_Cargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Lbl_CargarMouseClicked(evt);
            }
        });

        Lbl_Ejecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Play.png"))); // NOI18N
        Lbl_Ejecutar.setToolTipText("Ejecutar");
        Lbl_Ejecutar.setEnabled(false);
        Lbl_Ejecutar.setFocusable(false);
        Lbl_Ejecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Lbl_EjecutarMouseClicked(evt);
            }
        });

        Lbl_Compilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Build.png"))); // NOI18N
        Lbl_Compilar.setToolTipText("Compilar");
        Lbl_Compilar.setFocusable(false);
        Lbl_Compilar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Lbl_CompilarMouseClicked(evt);
            }
        });

        Lbl_Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Guardar.png"))); // NOI18N
        Lbl_Guardar.setToolTipText("Guardar Código");
        Lbl_Guardar.setFocusable(false);
        Lbl_Guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Lbl_GuardarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Panel_SuperiorLayout = new javax.swing.GroupLayout(Panel_Superior);
        Panel_Superior.setLayout(Panel_SuperiorLayout);
        Panel_SuperiorLayout.setHorizontalGroup(
            Panel_SuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_SuperiorLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(Lbl_Guardar)
                .addGap(50, 50, 50)
                .addComponent(Lbl_Cargar)
                .addGap(50, 50, 50)
                .addComponent(Lbl_Compilar)
                .addGap(50, 50, 50)
                .addComponent(Lbl_Ejecutar)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        Panel_SuperiorLayout.setVerticalGroup(
            Panel_SuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(Panel_SuperiorLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(Panel_SuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_SuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Lbl_Guardar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Lbl_Compilar, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Lbl_Ejecutar))
                    .addComponent(Lbl_Cargar)))
        );

        getContentPane().add(Panel_Superior, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 590, 50));

        Panel_Lateral.setOpaque(false);
        Panel_Lateral.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Btn_if.setText("Condición Si");
        Btn_if.setFocusable(false);
        Btn_if.setRequestFocusEnabled(false);
        Btn_if.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ifActionPerformed(evt);
            }
        });
        Panel_Lateral.add(Btn_if, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 72));

        Btn_while.setText("Ciclo Mientras");
        Btn_while.setFocusable(false);
        Btn_while.setRequestFocusEnabled(false);
        Btn_while.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_whileActionPerformed(evt);
            }
        });
        Panel_Lateral.add(Btn_while, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 78, 130, 72));

        Btn_for.setText("Ciclo Para");
        Btn_for.setFocusable(false);
        Btn_for.setRequestFocusEnabled(false);
        Btn_for.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_forActionPerformed(evt);
            }
        });
        Panel_Lateral.add(Btn_for, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 161, 130, 72));

        Btn_doWhile.setText("Ciclo Repita");
        Btn_doWhile.setFocusable(false);
        Btn_doWhile.setRequestFocusEnabled(false);
        Btn_doWhile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_doWhileActionPerformed(evt);
            }
        });
        Panel_Lateral.add(Btn_doWhile, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 244, 130, 72));

        Btn_print.setText("Línea Imprimir");
        Btn_print.setFocusable(false);
        Btn_print.setRequestFocusEnabled(false);
        Btn_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_printActionPerformed(evt);
            }
        });
        Panel_Lateral.add(Btn_print, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 327, 130, 72));

        getContentPane().add(Panel_Lateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 70, 140, 410));

        Txt_Editor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Txt_Editor.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        Txt_Editor.setForeground(new java.awt.Color(77, 77, 77));
        Txt_Editor.setText(" ");
        Txt_Editor.setOpaque(false);
        Txt_Editor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Txt_EditorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_EditorKeyTyped(evt);
            }
        });
        Scroll_Editor.setViewportView(Txt_Editor);

        getContentPane().add(Scroll_Editor, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 890, 400));

        Txt_Output.setEditable(false);
        Txt_Output.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        Txt_Output.setForeground(new java.awt.Color(77, 77, 77));
        Txt_Output.setFocusable(false);
        Txt_Output.setOpaque(false);
        Scroll_Salida.setViewportView(Txt_Output);

        getContentPane().add(Scroll_Salida, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 920, 150));

        Lbl_Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Code.png"))); // NOI18N
        getContentPane().add(Lbl_Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 495, 120, -1));

        Scroll_Numeros.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        Scroll_Numeros.setOpaque(false);

        Txt_NumeroLineas.setEditable(false);
        Txt_NumeroLineas.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        Txt_NumeroLineas.setForeground(new java.awt.Color(77, 77, 77));
        Txt_NumeroLineas.setFocusable(false);
        Txt_NumeroLineas.setOpaque(false);
        Scroll_Numeros.setViewportView(Txt_NumeroLineas);

        getContentPane().add(Scroll_Numeros, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 27, 400));

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(77, 77, 77));
        jLabel1.setText("GiraCODE");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 620, -1, -1));

        Lbl_Wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Fondo.png"))); // NOI18N
        Lbl_Wallpaper.setToolTipText("");
        getContentPane().add(Lbl_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 658));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que evita que se escriba el backSlash y deshabilita el boton de
     * ejecutar en caso que se modifique el codigo
     *
     * @param evt
     */
    private void Txt_EditorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_EditorKeyTyped
        // Deshabilita el boton de ejecutar si se presiona una tecla
        if (Lbl_Ejecutar.isEnabled()) {
            Lbl_Ejecutar.setEnabled(false);
        }
        // Obtiene la letra
        char key = evt.getKeyChar();
        // No se permite insertar un '\'
        if (key == '\\') {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Este programa no permite la inserción del caracter \'\\\'");
        }
    }//GEN-LAST:event_Txt_EditorKeyTyped

    /**
     * Evento utilizado para cargar el bloque de codigo repita/cuando en el
     * editor de texto
     *
     * @param evt
     */
    private void Btn_doWhileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_doWhileActionPerformed
        int posicionCursor = Txt_Editor.getCaretPosition();
        String codigoRepita = "repita\n\n#cuando [  ]\n";

        try {
            // Inserta el bloque repita-cuando
            Txt_Editor.getDocument().insertString(posicionCursor, codigoRepita, null);
            // Pinta de color azul las plabras reservadas
            Style style = Txt_Editor.getStyle("reservada");
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor, 6, style, false);
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor + 8, 7, style, false);
        } catch (BadLocationException ex) {
        }
        // Ingresa los numeros de lineas, para los enter de este bloque
        this.insertarNumeroLineas(3);
        // Coloca el cursor en la condicion de parada
        Txt_Editor.setCaretPosition(posicionCursor + 18);
    }//GEN-LAST:event_Btn_doWhileActionPerformed

    /**
     * Evento utilizado para insertar un bloque de codigo del ciclo 'mientras'
     *
     * @param evt
     */
    private void Btn_whileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_whileActionPerformed
        int posicionCursor = Txt_Editor.getCaretPosition();
        String codigoMientras = "mientras [  ]\n\n#mientras\n";
        try {
            // Inserta el bloque mientras
            Txt_Editor.getDocument().insertString(posicionCursor, codigoMientras, null);
            // Pinta de color azul las plabras reservadas
            Style style = Txt_Editor.getStyle("reservada");
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor, 8, style, false);
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor + 15, 9, style, false);
        } catch (BadLocationException ex) {
        }
        // insertar numero de saltos de linea
        insertarNumeroLineas(3);
        // Coloca el cursor en la condicion de parada
        Txt_Editor.setCaretPosition(posicionCursor + 11);
    }//GEN-LAST:event_Btn_whileActionPerformed

    /**
     * Evento utilizado para insertar la sentencia de imprimir en el editor de
     * texto
     *
     * @param evt
     */
    private void Btn_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_printActionPerformed
        int posicionCursor = Txt_Editor.getCaretPosition();
        String codigoImprimir = "imprimir  !";
        try {
            // Inserta el bloque mientras
            Txt_Editor.getDocument().insertString(posicionCursor, codigoImprimir, null);
            // Pinta de color azul las plabras reservadas
            Style style = Txt_Editor.getStyle("reservada");
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor, 8, style, false);
        } catch (BadLocationException ex) {
        }
        // Coloca el cursor en la condicion de parada
        Txt_Editor.setCaretPosition(posicionCursor + 9);
    }//GEN-LAST:event_Btn_printActionPerformed

    /**
     * Evento utilizado para cargar una condicional 'si' en el editor de texto
     *
     * @param evt
     */
    private void Btn_ifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ifActionPerformed
        int posicionCursor = Txt_Editor.getCaretPosition();
        String codigoSi = "si [  ]\n\n#si\n";
        try {
            // Inserta la sentencia si
            Txt_Editor.getDocument().insertString(posicionCursor, codigoSi, null);
            // Pinta de color azul las plabras reservadas
            Style style = Txt_Editor.getStyle("reservada");
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor, 2, style, false);
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor + 9, 3, style, false);
        } catch (BadLocationException ex) {
        }
        // Inserta la cantidad de saltos de linea que utiliza este codigo
        insertarNumeroLineas(3);
        // Coloca el cursor en la condicion de parada
        Txt_Editor.setCaretPosition(posicionCursor + 5);
    }//GEN-LAST:event_Btn_ifActionPerformed

    /**
     * Metodo utilizado para agregar cierta cantidad de lineas al inicador de
     * numero de linea
     *
     * @param pNumeroLineas numero de lineas a agregar
     */
    private void insertarNumeroLineas(int pNumeroLineas) {
        for (int i = 0; i < pNumeroLineas; i++) {
            numeroDeLineas++;
            Txt_NumeroLineas.setText(Txt_NumeroLineas.getText() + '\n' + numeroDeLineas);
        }
    }

    /**
     * Evento utilizado para ejecutar el codigo del editor cuando se presione el
     * boton de ejecutar
     *
     * @param evt
     */
    private void Lbl_EjecutarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Lbl_EjecutarMouseClicked
        Interprete corrida = new Interprete();
        Document salida = Txt_Output.getDocument();
        try {
            // Limpia el campo de salida para una nueva ejecucion.
            salida.remove(0, salida.getLength());
            // Ejecuta y escribe la salida del programa
            corrida.ejecutarCodigo(Txt_Editor.getDocument().getText(0, Txt_Editor.getDocument().getLength()));
            salida.insertString(0, corrida.getErrores().getDatos(), null);
            salida.insertString(salida.getLength(), "Corrida exitosa", Txt_Output.getStyle("ok"));
        } catch (BadLocationException ex) {
        }
    }//GEN-LAST:event_Lbl_EjecutarMouseClicked

    /**
     * Evento utilizado para enviar a compilar el codigo y escribir el resultado
     * en el espacio de salida
     *
     * @param evt
     */
    private void Lbl_CompilarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Lbl_CompilarMouseClicked
        Document documento = Txt_Editor.getDocument();
        try {
            // Obtiene todo el codigo del Editor
            String codigo = documento.getText(0, documento.getLength());
            // Envia a revisar el codigo
            SyntaxChecker checker = new SyntaxChecker();
            checker.verificarCodigo(codigo);
            // Borra el texto que haya en la salida
            Txt_Output.getDocument().remove(0, Txt_Output.getDocument().getLength());
            // Pega la salida en la consola con el respectivo color de acuerdo al resultado obtenido
            if (checker.getSalidaRevision().equals("Compilación correcta\n")) {
                Lbl_Ejecutar.setEnabled(true);
                Txt_Output.getDocument().insertString(0, checker.getSalidaRevision(), Txt_Output.getStyle("ok"));
            } else {
                Txt_Output.getDocument().insertString(0, checker.getSalidaRevision(), Txt_Output.getStyle("fail"));
            }
        } catch (BadLocationException ex) {
        }
    }//GEN-LAST:event_Lbl_CompilarMouseClicked

    /**
     * Evento utilizado para guardar el contenido de el editor en un archivo de
     * texto
     *
     * @param evt
     */
    private void Lbl_GuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Lbl_GuardarMouseClicked
        // Crea una ventana que solicita al usuario donde guardar el archivo
        JFileChooser ventanaGuardar = new JFileChooser();
        ventanaGuardar.setDialogTitle("Guardar código GiraCODE");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de Texto", "txt", "text");
        ventanaGuardar.setFileFilter(filter);
        ventanaGuardar.setAcceptAllFileFilterUsed(false);
        int seleccion = ventanaGuardar.showSaveDialog(this);

        // Verifica la seleccion del nombre y la ruta para enviar a guardar el archivo
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            // Obtiene la ruta seleccionada
            String ruta = ventanaGuardar.getSelectedFile().getAbsolutePath();
            // Verifica si hay que agregarle extension al archivo
            if (!ruta.endsWith(".txt")) {
                ruta += ".txt";
            }
            // Crea un archivo con la ruta seleccionada
            File archivoSeleccionado = new File(ruta);
            // Verifica si el archivo existe
            if (archivoSeleccionado.exists()) {
                // Ha seleccionado un archivo existente. Pregunta si desea sobreescribirlo
                int opt = JOptionPane.showConfirmDialog(this, "Esta seguro que desea sobreescribir el archivo "
                        + ventanaGuardar.getSelectedFile().getName() + "?",
                        "Sobreescribir archivo", JOptionPane.YES_NO_OPTION);
                // Verifica si la opcion seleccionada es para sobreescribir el archivo o no
                if (opt == JOptionPane.OK_OPTION) {
                    // SOBREESCRIBE EL ARCHIVO 
                    try {
                        String codigo = Txt_Editor.getDocument().getText(0, Txt_Editor.getDocument().getLength());
                        // Evia a sobreescribir el archivo.
                        new TxtHelper().guardarTxt(archivoSeleccionado, codigo);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                try {
                    String codigo = Txt_Editor.getDocument().getText(0, Txt_Editor.getDocument().getLength());
                    new TxtHelper().guardarTxt(archivoSeleccionado, codigo);
                } catch (BadLocationException ex) {
                    Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_Lbl_GuardarMouseClicked

    /**
     * Metodo utilizado para cargar los numeros de linea despues de corgar un
     * archivo
     */
    private void cargarNumeroDeLineas() {
        int cantidadDeLineas = 1;
        Txt_NumeroLineas.setText(cantidadDeLineas + "");
        String textoCargado = Txt_Editor.getText();
        // Recorre el texto del editor en busca de saltos de linea para agregar un numero mas
        for (int i = 0; i < textoCargado.length(); i++) {
            i = textoCargado.indexOf("\n", i);
            if (i == -1) {
                i = textoCargado.length();
            } else {
                cantidadDeLineas++;
                Txt_NumeroLineas.setText(Txt_NumeroLineas.getText() + "\n" + cantidadDeLineas);
            }
        }
        numeroDeLineas = cantidadDeLineas;
    }

    /**
     * Metodo utilizado para cargar el formato de las palabras reservadas
     * despues de abrir un archivo txt
     */
    private void cargarFormato() {
        try {
            char letra;
            String palabra = "";
            Style style = Txt_Editor.getStyle(StyleContext.DEFAULT_STYLE);
            // Obtiene el codigo para comenzar a analizarlo
            String codigo = Txt_Editor.getDocument().getText(0, Txt_Editor.getDocument().getLength());
            // Pinta todo el codigo de negro
            Txt_Editor.getStyledDocument().setCharacterAttributes(0, codigo.length(), style, false);

            // Se recorre en busca de cada una de las palabras que componen el codigo
            for (int i = 0; i < codigo.length(); i++) {
                letra = codigo.charAt(i);

                if (Character.isLetter(letra) || letra == '#') {
                    palabra += letra;
                } else if (letra == '@') {
                    int posCierre = codigo.indexOf("@", i + 1);
                    style = Txt_Output.getStyle("ok");
                    // Verifica si no hay signo de cierre (-1) para pintar todo o solo una parte del codigo
                    if (posCierre == -1) {
                        Txt_Editor.getStyledDocument().setCharacterAttributes(i, codigo.length() - i, style, false);
                        i = codigo.length();
                    } else {
                        Txt_Editor.getStyledDocument().setCharacterAttributes(i, posCierre - (i - 1), style, false);
                        i = posCierre;
                    }
                    palabra = "";
                } else {
                    if (!palabra.equals("")) {
                        if (main.palabrasReservadas.esPalabraReservada(palabra)) {
                            // Aqui se carga el formato
                            int posfirst = i - palabra.length();
                            style = Txt_Editor.getStyle("reservada");
                            Txt_Editor.getStyledDocument().setCharacterAttributes(posfirst, palabra.length(), style, false);
                        }
                    }
                    palabra = "";
                }
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Evento utilizado para cargar el contenido de un archivo de texto en el
     * editor
     *
     * @param evt
     */
    private void Lbl_CargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Lbl_CargarMouseClicked
        JFileChooser ventanaAbrir = new JFileChooser();
        ventanaAbrir.setDialogTitle("Cargar código GiraCODE");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de Texto", "txt", "text");
        ventanaAbrir.setFileFilter(filter);
        ventanaAbrir.setAcceptAllFileFilterUsed(false);
        int seleccion = ventanaAbrir.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            // Obtiene la ruta seleccionada
            String ruta = ventanaAbrir.getSelectedFile().getAbsolutePath();
            // Verifica si hay que agregarle extension al archivo            
            if (!ruta.endsWith(".txt")) {
                ruta += ".txt";
            }
            // Crea un archivo con la ruta seleccionada
            File archivoSeleccionado = new File(ruta);
            // Verifica si el archivo existe
            if (archivoSeleccionado.exists()) {
                try {
                    // Eliminar el codigo que haya en el editor en ese momento
                    Txt_Editor.getDocument().remove(0, Txt_Editor.getDocument().getLength());
                    String codigoArchivo = new TxtHelper().cargarTXT(archivoSeleccionado);
                    Txt_Editor.getDocument().insertString(0, codigoArchivo, null);
                    cargarFormato();
                    cargarNumeroDeLineas();
                } catch (BadLocationException ex) {
                    Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El archivo buscado, no existe en el directorio");
            }
        }
    }//GEN-LAST:event_Lbl_CargarMouseClicked

    /**
     * Evento utilizado para cargar el bloque 'para' en el editor de texto
     *
     * @param evt
     */
    private void Btn_forActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_forActionPerformed
        int posicionCursor = Txt_Editor.getCaretPosition();
        String codigoMientras = "para [  $  ]\n\n#para\n";
        try {
            // Inserta el bloque mientras
            Txt_Editor.getDocument().insertString(posicionCursor, codigoMientras, null);
            // Pinta de color azul las plabras reservadas
            Style style = Txt_Editor.getStyle("reservada");
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor, 4, style, false);
            Txt_Editor.getStyledDocument().setCharacterAttributes(posicionCursor + 14, 5, style, false);
        } catch (BadLocationException ex) {
        }
        // insertar numero de saltos de linea
        insertarNumeroLineas(3);
        // Coloca el cursor en la condicion de parada
        Txt_Editor.setCaretPosition(posicionCursor + 7);
    }//GEN-LAST:event_Btn_forActionPerformed

    private void Txt_EditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_EditorKeyReleased
        // Obtiene la letra presionada
        char key = evt.getKeyChar();
        // Carga los numeros de linea en caso de que se haya borrado alguna
        if (key == KeyEvent.VK_BACK_SPACE || key == KeyEvent.VK_DELETE) {
            cargarNumeroDeLineas();
        } else if (key == KeyEvent.VK_ENTER) {
            // Agrega una nueva linea y un numero de linea mas
            numeroDeLineas++;
            Txt_NumeroLineas.setText(Txt_NumeroLineas.getText() + "\n" + numeroDeLineas);
        } else if (evt.isControlDown() && (evt.getKeyCode() == KeyEvent.VK_X || evt.getKeyCode() == KeyEvent.VK_V)) {
            // Se ha cambiado la cantidad de lineas xq se ha presionado ctrl+x o ctrl+v
            cargarNumeroDeLineas();
        }
        // Pinta las palabras reservadas nuevamente
        cargarFormato();
    }//GEN-LAST:event_Txt_EditorKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_doWhile;
    private javax.swing.JButton Btn_for;
    private javax.swing.JButton Btn_if;
    private javax.swing.JButton Btn_print;
    private javax.swing.JButton Btn_while;
    private javax.swing.JLabel Lbl_Cargar;
    private javax.swing.JLabel Lbl_Compilar;
    private javax.swing.JLabel Lbl_Ejecutar;
    private javax.swing.JLabel Lbl_Guardar;
    private javax.swing.JLabel Lbl_Logo;
    private javax.swing.JLabel Lbl_Wallpaper;
    private javax.swing.JPanel Panel_Lateral;
    private javax.swing.JPanel Panel_Superior;
    private javax.swing.JScrollPane Scroll_Editor;
    private javax.swing.JScrollPane Scroll_Numeros;
    private javax.swing.JScrollPane Scroll_Salida;
    private javax.swing.JTextPane Txt_Editor;
    private javax.swing.JTextPane Txt_NumeroLineas;
    private javax.swing.JTextPane Txt_Output;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
